<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.sdk" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.apache.commons_net" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.core" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.local" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.ftp" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.ssh" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.dstore" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.remotecdt" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.examples" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.rse.efs" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.tm.discovery" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in         -->
	<!-- ${assembleScriptName}) but may also add pre and post processing       -->
	<!-- Add one target for each root element and each configuration           -->
	<!-- ===================================================================== -->

	<target name="assemble.org.eclipse.rse.sdk">
		<property name="archiveName" value="RSE-SDK-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.core">
		<property name="archiveName" value="RSE-runtime-core-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.local">
		<property name="archiveName" value="RSE-runtime-local-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.ftp">
		<property name="archiveName" value="RSE-runtime-ftp-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.ssh">
		<property name="archiveName" value="RSE-runtime-ssh-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.dstore">
		<property name="archiveName" value="RSE-runtime-dstore-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.examples">
		<property name="archiveName" value="RSE-examples-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.efs">
		<property name="archiveName" value="RSE-efs-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.rse.remotecdt">
		<property name="archiveName" value="RSE-runtime-remotecdt-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="assemble.org.eclipse.tm.discovery">
		<property name="archiveName" value="TM-discovery-${buildId}.zip"/>
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
		<antcall target="unpackUpdateJarsForPackaging" />
	</target>

	<target name="unpackUpdateJarsForPackaging" depends="myInit">
		<property name="tmpsite" value="${buildDirectory}/tmpsite" />
		<mkdir dir="${tmpsite}/new/eclipse/features" />
		<mkdir dir="${tmpsite}/new/eclipse/plugins" />
		<exec executable="unzip" dir="${buildDirectory}/${buildLabel}">
			<arg line="-q ${archiveName} -d ${tmpsite}" />
		</exec>
		<copy todir="${buildUpdateSitePath}">
		    <fileset dir="${tmpsite}/eclipse"/>
		</copy>

		<unpackUpdateJars site="${tmpsite}/eclipse" output="${tmpsite}/new/eclipse"/>
		<!-- <antcall target="packageLicenseFiles"/> -->
		<zip destfile="${buildDirectory}/${buildLabel}/${archiveName}"
			basedir="${tmpsite}/new"
	  	/>
		<delete dir="${tmpsite}"/>
	</target>

	<target name="packageLicenseFiles">
		<copy file="${buildRoot}/eclipse/epl-v10.html" todir="${tmpsite}/new/eclipse"/>
		<copy file="${buildRoot}/eclipse/notice.html" todir="${tmpsite}/new/eclipse"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Place the map files into the "maps" directory, specify version tags -->
	<!-- ===================================================================== -->
	<target name="getMapFiles">
		<copy todir="${buildDirectory}/maps">
			<fileset dir="${builder}/maps" includes="*.map" />
		</copy>
		<replace dir="${buildDirectory}/maps" token="@tag@" value="${mapVersionTag}">
			<include name="*.map"/>
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup" depends="myInit">
		<echo message="builder = ${builder}"/>
		<echo message="builderDirectory = ${builderDirectory}"/>
		<echo message="buildProperties = ${buildProperties}"/>
		<echo message="customTargets = ${customTargets}"/>
		<echo message="genericTargets = ${genericTargets}"/>
		<echo message="buildId = ${buildId}"/>
		<echo message="buildName = ${buildName}"/>
		<echo message="buildType = ${buildType}"/>
		<echo message="buildLabel = ${buildLabel}"/>
		<echo message="tstamp = ${DSTAMP}-${TSTAMP} of ${dateLong}"/>
		<echo message="archivePrefix = ${archivePrefix}"/>
		<echo message="collectingFolder = ${collectingFolder}"/>
	</target>

	<target name="myInit">
		<tstamp>
			<format property="dateLong" pattern="MMM d, yyyy"/>
		</tstamp>
		<property name="messagefile" value="message.in"/>
		<property name="xxmailto" value="dsdp-tm-cvs-commit@eclipse.org"/>
		<property name="mailto" value="martin.oberhuber@windriver.com"/>
		<property name="remotedir" value="moberhuber@dev.eclipse.org:downloads-tm/downloads/drops"/>
		<condition property="doUpload">
			<equals arg1="${publishDirectory}" arg2=""/>
		</condition>
		<condition property="doCopy">
			<not><equals arg1="${publishDirectory}" arg2=""/></not>
		</condition>
		<condition property="dropDir" value="S-${buildId}-${DSTAMP}${TSTAMP}" else="${buildId}">
			<equals arg1="${buildType}" arg2="S"/>
		</condition>
		<property name="buildUpdateSitePath" value="${packageDirectory}/${dropDir}/updates"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
		<!-- clean up the old driver -->
		<!--	<delete includeEmptyDirs="true">-->
		<!--
		<fileset dir="${buildDirectory}\plugins" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${buildDirectory}\features" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${builddest}" casesensitive="yes" defaultexcludes="yes">
			<include name="full/eclipse/**" />
			<include name="full/Config/**" />
			<include name="lite/**" />
		</fileset>
		<fileset dir="${head}\eclipse\plugins" casesensitive="yes" defaultexcludes="yes">
			<include name="org.eclipse.*/**" />
		</fileset>
		<fileset dir="${head}\eclipse\features" casesensitive="yes" defaultexcludes="no">
			<include name="org.eclipse.*/**" />
		</fileset>
		-->
		<!--	</delete>-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
		<antcall target="serverruntime" />
		<antcall target="hideServerStuff" />
		<antcall target="allElements">
			<param name="target" value="gatherSources" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
		<antcall target="revealServerStuff" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild" depends="myInit">
		<mkdir dir="${packageDirectory}/${dropDir}" />
		<move todir="${packageDirectory}/${dropDir}">
			<fileset dir="${buildDirectory}/${buildLabel}" includes="RSE-*.zip,TM-*.zip"/>
		</move>
		<move todir="${packageDirectory}/${dropDir}">
			<fileset dir="${buildDirectory}/${buildLabel}" includes="rseserver-*"/>
		</move>
		<copy todir="${packageDirectory}/${dropDir}" file="${buildDirectory}/directory.txt"/>
		<!-- Create and analyze the compilelog.txt file -->
		<concat destfile="${packageDirectory}/${dropDir}/compilelog.txt">
			<fileset dir="${buildDirectory}/plugins" includes="**/*.bin.log"/>
		</concat>
		<loadfile property="compileLog" srcFile="${packageDirectory}/${dropDir}/compilelog.txt"/>
		<condition property="hasErrors">
			<contains string="${compileLog}" substring=" ERROR"/>
		</condition>
		<!-- Create the index.php file -->
		<copy todir="${packageDirectory}/${dropDir}">
			<fileset dir="${builder}/template/" includes="*.php,*.gif,package.count"/>
		</copy>
		<condition property="buildTypeLong" value="Private"><equals arg1="${buildType}" arg2="P"/></condition>
		<condition property="buildTypeLong" value="Nightly"><equals arg1="${buildType}" arg2="N"/></condition>
		<condition property="buildTypeLong" value="Integration"><equals arg1="${buildType}" arg2="I"/></condition>
		<condition property="buildTypeLong" value="Stable"><equals arg1="${buildType}" arg2="S"/></condition>
		<replace file="${packageDirectory}/${dropDir}/index.php">
			<replacefilter token="@buildTypeLong@" value="${buildTypeLong}"/>
			<replacefilter token="@dateLong@" value="${dateLong}"/>
			<replacefilter token="@dropDir@" value="${dropDir}"/>
			<replacefilter token="@buildId@" value="${buildId}"/>
		</replace>
		<replace file="${packageDirectory}/${dropDir}/buildNotes.php">
			<replacefilter token="@dateLong@" value="${dateLong}"/>
			<replacefilter token="@buildId@" value="${buildId}"/>
		</replace>
		<antcall target="publish"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish" if="doPublish">
		<antcall target="publishCopy"/>
		<antcall target="publishUpload"/>
		<antcall target="mail"/>
	</target>

	<target name="publishCopy" depends="myInit" if="doCopy" unless="hasErrors">
		<mkdir dir="${publishDirectory}/${dropDir}" />
		<copy todir="${publishDirectory}/${dropDir}">
			<fileset dir="${packageDirectory}/${dropDir}" includes="*.zip,*.tar,*.php,*.txt,*.gif,package.count" />
		</copy>
	</target>

	<target name="publishUpload" depends="myInit" if="doUpload" unless="hasErrors">
		<exec dir="${packageDirectory}" executable="scp">
			<arg line="-r ${dropDir} ${remotedir}"/>
		</exec>
	</target>

	<target name="mail" depends="myInit">
		<antcall target="mailPass"/>
		<antcall target="mailFail"/>
	</target>
	
	<target name="mailPass" unless="hasErrors">
		<copy file="${builder}/${messagefile}" tofile="${buildDirectory}/message.txt" overwrite="true"/>
		<replace file="${buildDirectory}/message.txt">
			<replacefilter token="@buildId@" value="${buildId}"/>
		</replace>
		<mail subject="RSE Build ${buildId} completed"
 			tolist="${mailto}" from="martin.oberhuber@windriver.com">
			<message src="${buildDirectory}/message.txt"/>
		</mail>
	</target>

	<target name="mailFail" if="hasErrors">
		<mail subject="RSE Build ${buildId} failed"
			tolist="${mailto}" from="martin.oberhuber@windriver.com">
			<message src="${packageDirectory}/${dropDir}/compilelog.txt"/>
		</mail>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<!-- =====================================================================
	     Specialized targets to build the server runtime.           
	     ===================================================================== -->

	<target name="serverruntime">

		<property name="working" value="${buildDirectory}/${buildLabel}/rseserver"/>
		<mkdir dir="${working}" />
		<mkdir dir="${working}/jars" />

		<copy todir="${working}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services.dstore/serverruntime" includes="**" />
		</copy>

		<copy todir="${working}/jars">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.dstore.core" includes="dstore_core.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.dstore.extra" includes="dstore_extra_server.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services" includes="clientserver.jar" />
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rse.services.dstore" includes="dstore_miners.jar" />
		</copy>

		<antcall target="rseserver-os-tar">
			<param name="os" value="aix"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os-tar">
			<param name="os" value="unix"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os-tar">
			<param name="os" value="macosx"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os-tar">
			<param name="os" value="linux"/>
			<param name="eol" value="lf"/>
		</antcall>
		<antcall target="rseserver-os-zip">
			<param name="os" value="windows"/>
			<param name="eol" value="crlf"/>
		</antcall>

		<delete dir="${working}" />

	</target>

	<target name="rseserver-os-tar" depends="rseserver-os-collect">
		<tar destfile="${buildDirectory}/${buildLabel}/rseserver-${buildId}-${os}.tar" basedir="${working}/collector" includes="*"/>
		<delete dir="${working}/collector" />
	</target>
	<target name="rseserver-os-zip" depends="rseserver-os-collect">
		<zip destfile="${buildDirectory}/${buildLabel}/rseserver-${buildId}-${os}.zip" basedir="${working}/collector" includes="*"/>
		<delete dir="${working}/collector" />
	</target>

	<target name="rseserver-os-collect">
		<mkdir dir="${working}/collector" />
		<copy todir="${working}/collector">
			<fileset dir="${working}/scripts/${os}" includes="*"/>
		</copy>
		<chmod perm="755">
			<fileset dir="${working}/collector" includes="*"/>
		</chmod>
		<copy todir="${working}/collector">
			<fileset dir="${working}/data" includes="*"/>
		</copy>
		<replace file="${working}/collector/build.dat">
			<replacefilter token="@build@" value="${buildId}"/>
			<replacefilter token="@version@" value="${mapVersionTag}"/>
		</replace>
		<fixcrlf srcdir="${working}/collector" eol="${eol}" eof="asis" includes="*"/>
		<copy todir="${working}/collector">
			<fileset dir="${working}/jars" includes="*"/>
		</copy>
		<chmod perm="755">
			<fileset dir="${working}/collector" includes="*.pl,*.sh"/>
		</chmod>
	</target>

	<!-- =====================================================================
	     Specialized targets hide/reveal the server stuff so it doesn't get packaged
	     in the client.          
	     ===================================================================== -->

	<target name="hideServerStuff">
		<mkdir dir="${buildDirectory}/hidden"/>
		<move todir="${buildDirectory}/hidden">
			<fileset dir="${buildDirectory}/plugins" includes="**/*.jar" />
			<fileset dir="${buildDirectory}/plugins" includes="**/*src.zip" excludes="**/src.zip"/>
		</move>
	</target>

	<target name="revealServerStuff">
		<move todir="${buildDirectory}/plugins">
			<fileset dir="${buildDirectory}/hidden" includes="**" />
		</move>
		<delete dir="${buildDirectory}/hidden"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Zip the docs                                                          -->
	<!-- ===================================================================== -->
	<target name="zipDoc">
		<zip destfile="${buildDirectory}\plugins\${docPluginID}\doc.zip" filesonly="false" defaultexcludes="true">
			<fileset dir="${buildDirectory}\plugins\${docPluginID}" defaultexcludes="true">
				<include name="**/*.gif" />
				<include name="**/*.html" />
				<include name="**/*.htm" />
				<include name="**/*.GIF" />
				<include name="**/*.HTML" />
				<include name="**/*.HTM" />
				<include name="**/*.css" />
			</fileset>
		</zip>
	</target>
	
</project>
